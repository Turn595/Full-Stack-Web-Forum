{"remainingRequest":"C:\\Users\\Andrew\\Saskpolytech\\CWEB-FinalProject\\cweb.2020.f09\\vue-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Andrew\\Saskpolytech\\CWEB-FinalProject\\cweb.2020.f09\\vue-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Andrew\\Saskpolytech\\CWEB-FinalProject\\cweb.2020.f09\\vue-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Andrew\\Saskpolytech\\CWEB-FinalProject\\cweb.2020.f09\\vue-ui\\src\\components\\publishArticle.vue?vue&type=template&id=cb766112&","dependencies":[{"path":"C:\\Users\\Andrew\\Saskpolytech\\CWEB-FinalProject\\cweb.2020.f09\\vue-ui\\src\\components\\publishArticle.vue","mtime":1618004406990},{"path":"C:\\Users\\Andrew\\Saskpolytech\\CWEB-FinalProject\\cweb.2020.f09\\vue-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Andrew\\Saskpolytech\\CWEB-FinalProject\\cweb.2020.f09\\vue-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Andrew\\Saskpolytech\\CWEB-FinalProject\\cweb.2020.f09\\vue-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Andrew\\Saskpolytech\\CWEB-FinalProject\\cweb.2020.f09\\vue-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}